import streamlit as st
import streamlit.components.v1 as components
from scipy.spatial import distance
import avanzadas

def cargaMD():
	st.title('üìÅ Carga tu archivo')
	st.markdown('##### Caracter√≠sticas del archivo:')
	st.markdown('Para el funcionamiento eficiente del algoritmo, carga un archivo desde tu computadora que cumpla con las siguientes caracter√≠sticas')
	st.markdown('üü£ **Archivo con extensi√≥n .csv**')
	st.markdown('Esta extensi√≥n corresponde a un archivo con valores separados por comas')
	st.markdown('üü£ **Archivo con datos num√©ricos**')
	st.markdown('Estos deben ser datos num√©ricos de los elementos de los cuales deseas obtener las distancias')
	file = st.file_uploader("Carga tu archivo", type=["csv", "txt"], key='Metricas')
	return file

def calculaAcotada():
	st.success('Yay')


def start():
	import pandas as pd                         # Para la manipulaci√≥n y an√°lisis de datos
	import numpy as np                          # Para crear vectores y matrices n dimensionales
	import matplotlib.pyplot as plt             # Para generar gr√°ficas a partir de los datos
	from scipy.spatial.distance import cdist    # Para el c√°lculo de distancias

	st.title('M√≥dulo: M√©tricas de Distancia')
	st.markdown('##### Obten la matriz de distancias a partir de un conjunto de elementos, con diferentes medidas de distancia:')
	st.markdown('üü£ **Distancia Euclidiana (Eucl√≠dea)**')
	st.markdown('üü£ **Distancia de Chebyshev**')
	st.markdown('üü£ **Distancia de Manhattan (Geometr√≠a del taxista)**')
	st.markdown('üü£ **Distancia de Minkowsky**')
	st.markdown('**Descripci√≥n**: Las m√©tricas de distancia son una herramienta muy √∫til que implementan muchos de los algoritmos de IA para poder identificar elementos que comparten caracter√≠sticas en com√∫n y sus diferencias. Para obtener una mayor eficiencia, es necesario identificar qu√© medida de distancia utilizar para obtener modelos m√°s precisos. Este m√≥dulo te permite obtener la diferencia entre estas m√©tricas, a forma de herramienta que te permita elegir fundamentadamente. ')
	st.image("https://blogs.iadb.org/conocimiento-abierto/wp-content/uploads/sites/10/2018/05/calcular-distancias-banner-2.jpg",width=1000)
	datosMD = cargaMD()



	st.header('üìê Distancia Euclidiana (Eucl√≠dea)')
	st.markdown('**Descripci√≥n**: La distancia euclideana es una de las m√©tricas m√°s utilizadas para calcular la distancia entre dos puntos. Sus bases se encuentran en la aplicaci√≥n del Teorema de Pit√°goras, donde la distancia viene a ser la longitud de la hipotenusa.')
	if datosMD is not None:		
		Hipoteca=pd.read_csv(datosMD)

		st.header("Datos cargados: ")
		st.dataframe(Hipoteca)

		DstEuclidiana = cdist  (Hipoteca, Hipoteca, metric = 'euclidean')
		#MEuclidiana = pd.DataFrame(DstEuclidiana)

		st.header("Matriz de distancia euclideana: ")
		st.dataframe(DstEuclidiana)

		st.warning('Puedes acotar la matriz de distancia haciendo una selecci√≥n de los elementos que quieres obtener de la matriz.')
		acotar = st.checkbox('Acotar matriz')
		if acotar:
			st.markdown('**Ingresa la cantidad de elementos que deseas obtener en la matriz**')
			y=0
			y=st.slider('E. Elementos:', min_value=1, max_value=202, value=0, step=1)
			st.write('Elementos: '+str(y))

			if y>0:
				DstEuclidiana = cdist  (Hipoteca.iloc[0:y], Hipoteca.iloc[0:y], metric = 'euclidean')
				st.header("Matriz de distancia euclideana acotada: ")
				st.markdown('**Elementos en el rango [0:**'+str(y)+'**]**')
				st.dataframe(DstEuclidiana)

		st.info('Puedes elegir dos elementos en espec√≠fico para obtener la distancia entre ellos.')
		seleccion = st.checkbox('Elegir 2 elementos')
		if seleccion:
			st.markdown('**Selecciona los dos elementos de los cuales deseas obtener la distancia**')
			elemento1=-1
			elemento2=-1
			elemento1=st.slider('L√≠mite inferior', min_value=0, max_value=201, value=0, step=1)
			st.write('Elemento 1: '+str(elemento1))
			elemento2=st.slider('L√≠mite superior', min_value=1, max_value=201, value=0, step=1)
			st.write('Elemento 2: '+str(elemento2))

			if elemento1>=0 and elemento2>=0:
				Objeto1 = Hipoteca.iloc[elemento1]
				Objeto2 = Hipoteca.iloc[elemento2]
				dstEuclidiana = distance.euclidean(Objeto1,Objeto2)
				st.success('La distancia euclideana entre el elemento '+str(elemento1)+' y el elemento '+str(elemento2)+' es: '+str(dstEuclidiana))


	st.header('üìê Distancia Chebyshev')
	st.markdown('**Descripci√≥n**: La distancia Chebyshev es el valor m√°ximo absoluto de las diferencias entre las coordenadas de un par de elementos.')
	if datosMD is not None:		
		
		DstChebyshev = cdist  (Hipoteca, Hipoteca, metric = 'chebyshev')

		st.header("Matriz de distancia Chebyshev: ")
		st.dataframe(DstChebyshev)

		st.warning('Puedes acotar la matriz de distancia haciendo una selecci√≥n de los elementos que quieres obtener de la matriz.')
		acotarC = st.checkbox('Acotar matriz Chebyshev')
		if acotarC:
			st.markdown('**Ingresa la cantidad de elementos que deseas obtener en la matriz**')
			yC=0
			yC=st.slider('C. Elementos:', min_value=1, max_value=202, value=0, step=1)
			st.write('Elementos: '+str(yC))

			if yC>0:
				DstChebyshev = cdist  (Hipoteca.iloc[0:yC], Hipoteca.iloc[0:yC], metric = 'chebyshev')
				st.header("Matriz de distancia Chebyshev acotada: ")
				st.markdown('**Elementos en el rango [0:**'+str(yC)+'**]**')
				st.dataframe(DstChebyshev)


		st.info('Puedes elegir dos elementos en espec√≠fico para obtener la distancia entre ellos.')
		seleccion = st.checkbox('Elegir 2 elementos para obtener distancia Chebyshev')
		if seleccion:
			st.markdown('**Selecciona los dos elementos de los cuales deseas obtener la distancia Chebyshev**')
			elemento1C=-1
			elemento2C=-1
			elemento1C=st.slider('L√≠mite inferior ', min_value=0, max_value=201, value=5, step=1)
			st.write('Elemento 1: '+str(elemento1C))
			elemento2C=st.slider('L√≠mite superior ', min_value=1, max_value=201, value=3, step=1)
			st.write('Elemento 2: '+str(elemento2C))

			if elemento1C>=0 and elemento2C>=0:
				Objeto1 = Hipoteca.iloc[elemento1C]
				Objeto2 = Hipoteca.iloc[elemento2C]
				dstChebyshev = distance.chebyshev(Objeto1,Objeto2)
				st.success('La distancia Chebyshev entre el elemento '+str(elemento1C)+' y el elemento '+str(elemento2C)+' es: '+str(dstChebyshev))


	st.header('üìê Distancia Manhattan')
	st.markdown('**Descripci√≥n**: La distancia euclidiana es una buena m√©trica. Sin embargo, en la vida real, por ejemplo es imposible moverse siempre de un punto a otro de manera recta. Se utiliza la distancia de Manhattan si se necesita calcular la distancia entre dos puntos en una ruta similar a una cuadr√≠cula.')
	if datosMD is not None:		
		
		DstManhattan = cdist  (Hipoteca, Hipoteca, metric = 'cityblock')

		st.header("Matriz de distancia Manhattan: ")
		st.dataframe(DstManhattan)

		st.warning('Puedes acotar la matriz de distancia haciendo una selecci√≥n de los elementos que quieres obtener de la matriz.')
		acotarM = st.checkbox('Acotar matriz Manhattan')
		if acotarM:
			st.markdown('**Ingresa la cantidad de elementos que deseas obtener en la matriz**')
			yM=0
			yM=st.slider('M. Elementos:', min_value=1, max_value=202, value=0, step=1)
			st.write('Elementos: '+str(yM))

			if yM>0:
				DstManhattan = cdist  (Hipoteca.iloc[0:yM], Hipoteca.iloc[0:yM], metric = 'cityblock')
				st.header("Matriz de distancia Manhattan acotada: ")
				st.markdown('**Elementos en el rango [0:**'+str(yM)+'**]**')
				st.dataframe(DstManhattan)

		st.info('Puedes elegir dos elementos en espec√≠fico para obtener la distancia entre ellos.')
		seleccion = st.checkbox('Elegir 2 elementos para obtener distancia Manhattan')
		if seleccion:
			st.markdown('**Selecciona los dos elementos de los cuales deseas obtener la distancia Manhattan**')
			elemento1M=-1
			elemento2M=-1
			elemento1M=st.slider('M. L√≠mite inferior ', min_value=0, max_value=201, value=5, step=1)
			st.write('Elemento 1: '+str(elemento1M))
			elemento2M=st.slider('M. L√≠mite superior ', min_value=1, max_value=201, value=3, step=1)
			st.write('Elemento 2: '+str(elemento2M))

			if elemento1M>=0 and elemento2M>=0:
				Objeto1 = Hipoteca.iloc[elemento1M]
				Objeto2 = Hipoteca.iloc[elemento2M]
				dstManhattan = distance.cityblock(Objeto1,Objeto2)
				st.success('La distancia Manhattan entre el elemento '+str(elemento1M)+' y el elemento '+str(elemento2M)+' es: '+str(dstManhattan))

	st.header('üìê Distancia Minkowski')
	st.markdown('**Descripci√≥n**: La distancia Minkowski es una distancia entre dos puntos en un espacio n-dimensional. Es una m√©trica de distancia generalizada: Euclidiana, Manhattan y Chebyshev. ')
	st.markdown('Esta m√©trica permite calcular la distancia de tres formas diferentes, en funci√≥n del valor de **lambda**, que define el orden para las 3 diferentes m√©tricas que conocemos. Los valores se definen de la siguiente forma')
	st.markdown('üü£ **Œª=1. Distancia Manhattan**')
	st.markdown('üü£ **Œª=2. Distancia Euclidiana**')
	st.markdown('üü£ **Œª=3. Distancia de Chebyshev**')
	st.markdown('**Actualmente se suelen emplear valores intermedios, como **Œª=1.5** que proporciona un equilibrio entre las medidas. Este es el valor por default en el programa.**')
	st.info('**Nota**: El algoritmo est√° configurado de forma gen√©rica para ofrecerte un resultado √∫til, pero si deseas cambiar la configuraci√≥n predeterminada para los par√°metros con que trabajan los algoritmos, dirigete a la secci√≥n de configuaciones avanzadas antes de seguir. **Esta opci√≥n es recomendada √∫nicamente para usuarios expertos**, ya que puede influir en el funcionamiento y desempe√±o del algoritmo, y si se realiza de forma incorrecta puede afectar a los resultados. ')
	
	if datosMD is not None:		
		
		DstMinkowski = cdist (Hipoteca, Hipoteca, metric = 'minkowski', p=avanzadas.lamb)

		st.header("Matriz de distancia Minkowski: ")
		st.dataframe(DstMinkowski)

		st.warning('Puedes acotar la matriz de distancia haciendo una selecci√≥n de los elementos que quieres obtener de la matriz.')
		acotarMk = st.checkbox('Acotar matriz Minkowski')
		if acotarMk:
			st.markdown('**Ingresa la cantidad de elementos que deseas obtener en la matriz**')
			yMk=0
			yMk=st.slider('Mk. Elementos:', min_value=1, max_value=202, value=0, step=1)
			st.write('Elementos: '+str(yMk))

			if yMk>0:
				DstMinkowski = cdist  (Hipoteca.iloc[0:yMk], Hipoteca.iloc[0:yMk], metric = 'minkowski', p=1.5)
				st.header("Matriz de distancia Minkowski acotada: ")
				st.markdown('**Elementos en el rango [0:**'+str(yMk)+'**]**')
				st.dataframe(DstMinkowski)

		st.info('Puedes elegir dos elementos en espec√≠fico para obtener la distancia entre ellos.')
		seleccion = st.checkbox('Elegir 2 elementos para obtener distancia Minkowski')
		if seleccion:
			st.markdown('**Selecciona los dos elementos de los cuales deseas obtener la distancia Minkowski**')
			elemento1Mk=-1
			elemento2Mk=-1
			elemento1Mk=st.slider('M. Elemento 1 ', min_value=0, max_value=201, value=5, step=1)
			st.write('Elemento 1: '+str(elemento1Mk))
			elemento2Mk=st.slider('M. Elemento 2 ', min_value=1, max_value=201, value=3, step=1)
			st.write('Elemento 2: '+str(elemento2Mk))

			if elemento1Mk>=0 and elemento2Mk>=0:
				Objeto1 = Hipoteca.iloc[elemento1Mk]
				Objeto2 = Hipoteca.iloc[elemento2Mk]
				dstMinkowski = distance.minkowski(Objeto1,Objeto2, p=lamb)
				st.success('La distancia Minkowski entre el elemento '+str(elemento1Mk)+' y el elemento '+str(elemento2Mk)+' es: '+str(dstMinkowski))
		

	
