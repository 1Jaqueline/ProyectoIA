import streamlit as st
import streamlit.components.v1 as components
from matplotlib import text
import pandas as pd               # Para la manipulaci칩n y an치lisis de datos
import numpy as np                # Para crear vectores y matrices n dimensionales
import matplotlib.pyplot as plt   # Para la generaci칩n de gr치ficas a partir de los datos
import seaborn as sns             # Para la visualizaci칩n de datos basado en matplotlib
import streamlit as st            # Para la generaci칩n de gr치ficas interactivas
from sklearn.preprocessing import StandardScaler, MinMaxScaler  # Para escalar los datos
import scipy.cluster.hierarchy as shc
from sklearn.cluster import AgglomerativeClustering
from scipy.cluster.hierarchy import dendrogram, linkage, fcluster
from sklearn.cluster import KMeans
from sklearn.metrics import pairwise_distances_argmin_min
from kneed import KneeLocator
from mpl_toolkits.mplot3d import Axes3D
import avanzadas

def cargaCR():
	st.title('游늬 Carga tu archivo')
	st.markdown('##### Caracter칤sticas del archivo:')
	st.markdown('Para el funcionamiento eficiente del algoritmo, carga un archivo desde tu computadora que cumpla con las siguientes caracter칤sticas')
	st.markdown('游릮 **Archivo con extensi칩n .csv**')
	st.markdown('Esta extensi칩n corresponde a un archivo con valores separados por comas')
	st.markdown('游릮 **Archivo con registros**')
	st.markdown('Estos deben ser registros que contengan las caracter칤sticas que deseas evaluar')
	file = st.file_uploader("Carga tu archivo", type=["csv", "txt"], key='Clustering')
	return file


def start():
	st.set_option('deprecation.showPyplotGlobalUse', False) 
	st.title('M칩dulo de clustering')
	st.markdown('La IA aplicada en el an치lisis cl칰steres consiste en la segmentaci칩n y delimitaci칩n de grupos de objetos (elementos), que son unidos por caracter칤sticas comunes que 칠stos comparten por medio de aprendizaje no supervisado). Su objetivo es dividir una poblaci칩n heterog칠nea de elementos en un n칰mero de grupos homog칠neos, de acuerdo a sus similitudes. Los grupos nacen a partir de los datos y se proveen una serie de patrones ocultos en 칠stos.')

	st.image("https://www.researchgate.net/profile/Rafael-Torrealba/publication/278668507/figure/fig5/AS:668640991010834@1536427843576/3D-plot-of-clusters-obtained-from-the-k-means-algorithm.ppm",width=1000)
	st.markdown('#### **Este m칩dulo cuenta con 2 algoritmos**')
	st.markdown('游릮 **Algoritmo de cl칰ster jer치rquico Ascendente**')
	st.markdown('游릮 **Algoritmo de cl칰ster particional K-means**')


	st.header('游릮 Algoritmo de cl칰ster jer치rquico Ascendente')
	st.markdown('El algoritmo de **clustering jer치rquico** organiza los elementos, de manera recursiva, en una estructura en forma de 치rbol que representa las relaciones de similitud entre los distintos elementos.')
	st.markdown('El algoritmo **ascendente jer치rquico** consiste en agrupar en cada iteraci칩n aquellos 2 elementos m치s cercanos (cl칰ster). De forma que se va construyendo una estructura en forma de 치rbol y el proceso concluye cuando se forma un 칰nico cl칰ster.')
	datos = cargaCR()

	if datos is not None:		
		DatosTransacciones=pd.read_csv(datos)
		st.header("Datos cargados: ")
		st.dataframe(DatosTransacciones)

		st.header('Selecci칩n de caracter칤sticas ')
		st.markdown('Para poder realizar un modelo eficiente es necesario trabajar con variables que aporten informaci칩n significativa al modelo, para evitar redundancia innecesaria. Para poder realizar una selecci칩n de caracter칤sticas de forma fundamentada empleamos una matriz de correlaciones, con el objetivo de seleccionar variables significativas')

		st.header('Evaluaci칩n visual')
		st.markdown('Para una apreciaci칩n visual de la correlaci칩n de las variables manejamos un치 gr치fica de dispersi칩n que eval칰a el conjunto de variables que tienen los datos.')
		variables=DatosTransacciones.columns
		variablesDF=st.dataframe(variables)
		option = st.selectbox('Elige la variable que deseas evaluar en el gr치fico de dispersi칩n',variables,index=9)
		st.write('**Variable seleccionada:**', option)

		verDisp = st.checkbox('Ver gr치fico de dispersi칩n de todas las variables')
		st.error('Considera que esto consume una cantidad considerable de tiempo. Se recomienda desactivar la opci칩n para continuar con las siguientes instrucciones.')
		if verDisp:
			st.header('Gr치fico de dispersi칩n de todas las variables')
			disp=sns.pairplot(DatosTransacciones, hue=option)
			st.pyplot(disp)

		st.warning('Tambi칠n puedes obtener la gr치fica de dispersi칩n para dos diferentes variables, lo que tiene un menor costo de tiempo.')
		dos = st.checkbox('Obtener gr치fica de dispersi칩n de dos variables')
		if dos:
			st.header('Gr치fico de dispersi칩n de dos variables')
			optionDos = st.multiselect('Selecciona las dos variables que deseas comparar',variables)
			if len(optionDos)==2:
				st.set_option('deprecation.showPyplotGlobalUse', False) 
				st.write('**Variables seleccionadas:**', optionDos[0], optionDos[1])
				d1=optionDos[0][:]
				d2=optionDos[1][:]

				sns.scatterplot(x=d1, y =d2, data=DatosTransacciones, hue=option)
				plt.title('Gr치fico de dispersi칩n')
				plt.xlabel(optionDos[0])
				plt.ylabel(optionDos[1])
				st.pyplot()
			else:
				st.error('Selecciona unicamente 2 opciones')

		st.header('Coeficiente de Pearson')
		st.markdown('Este m칠todo nos permite obtener una matriz de correlaci칩n que nos brinda informaci칩n para realizar una selecci칩n de variables de forma fundamentada.')
		st.markdown('Los intervalos sugeridos para la consideraci칩n de la correlaci칩n con el m칠todo de Pearson son los siguientes:')
		st.markdown('游릮 **De -1.0 a -0.67 y 0.67 a 1.0 se conocen como correlaciones fuertes o altas.**')
		st.markdown('游릮 **De -0.66 a -0.34 y 0.34 a 0.66 se conocen como correlaciones moderadas o medias.**')
		st.markdown('游릮 **De -0.33 a 0.0 y 0.0 a 0.33 se conocen como correlaciones d칠biles o bajas.**')

		st.header('Matriz de correlaciones')
		CorrDatos = DatosTransacciones.corr(method='pearson')
		st.dataframe(CorrDatos)

		MatrizInf = np.triu(CorrDatos)
		sns.heatmap(CorrDatos, cmap='RdBu_r', annot=True, mask=MatrizInf)

		fig=plt.figure(figsize=(14,7))
		MatrizInf = np.triu(CorrDatos)
		sns.heatmap(CorrDatos, cmap='RdBu_r', annot=True, mask=MatrizInf)
		st.header('Mapa de calor')
		plt.title('Mapa de calor')
		st.pyplot(fig)

		st.markdown('#### Con base en la informaci칩n obtenida, ahora puedes seleccionar las variables con las que NO quieres trabajar.')
		st.info('Como recomendaci칩n, considera las variables que son indispensables para tu caso de estudio, sin que importe mucho si tiene o no una alta correlaci칩n. La selecci칩n de caracter칤sticas no es arbitaria, analiza la importancia de las variables en tu caso de estudio y descarta aquellas que no aportan valor y tienen alta correlaci칩n.')
		variablesEliminadas = st.multiselect('Selecciona las variables con las que NO deseas trabajar',variables)

		listo = st.checkbox('Listo. He seleccionado las variables')
		if listo:

			for item in variablesEliminadas:
				DatosTransacciones = DatosTransacciones.drop(columns=[item])

			st.markdown('### **Variables seleccionadas**')
			st.dataframe(DatosTransacciones)

			st.markdown('Cuando se trabaja con clustering, dado que son algoritmos basados en distancias, es fundamental escalar los datos para que cada una de las variables contribuyan por igual en el an치lisis.')
			estandarizar = StandardScaler()
			MEstandarizada = estandarizar.fit_transform(DatosTransacciones)
			st.markdown('### **Matriz Estandarizada**')
			st.dataframe(MEstandarizada)

			algoJerarquico = st.checkbox('Aplicar el algoritmo Jer치rquico Ascendente')
			if algoJerarquico:
				st.subheader('Aplicaci칩n del algoritmo Jer치rquico Ascendente')

				metricas=['euclidean','chebyshev','cityblock','minkowski']
				metric = st.selectbox('Elige la m칠trica que deseas implementar en el algoritmo',metricas,index=0)

				arbol = st.checkbox('Obtener 치rbol')
				st.warning('Considera que la generaci칩n del 치rbol puede llevar un rato.')
				if arbol:
					plt.figure(figsize=(10, 7))
					plt.title("Caso de estudio")
					shc.dendrogram(shc.linkage(MEstandarizada, method='complete', metric=metric))
					st.pyplot()

				st.subheader('Obtenci칩n de los cl칰steres')
				st.markdown('Los cl칰steres son conjuntos de elementos que comparten caracter칤sticas entre s칤 despu칠s del proceso de los datos de un conjunto general.')

				totalCluster=avanzadas.totalClusterC

				MJerarquico = AgglomerativeClustering(n_clusters=totalCluster, linkage='complete', affinity='euclidean')
				MJerarquico.fit_predict(MEstandarizada)

				DatosTransacciones['clusterH'] = MJerarquico.labels_
				st.dataframe(DatosTransacciones)

				st.subheader('La cantidad de elementos que tiene cada cl칰ster identificado')
				#Cantidad de elementos en los clusters
				cuenta=st.dataframe(DatosTransacciones.groupby(['clusterH'])['clusterH'].count())

				verCluster = st.checkbox('Ver elementos que pertenecen a cada cl칰ster')
				if verCluster:
					i=0
					while i<totalCluster:
						st.info('Elementos del cl칰ster n칰mero '+str(i))
						st.dataframe(DatosTransacciones[DatosTransacciones.clusterH==i])
						i=i+1

				
				obtCentroidesJ = st.checkbox('Obtener centroides')
				if obtCentroidesJ:
					st.subheader('Obtenci칩n de los centroides')
					st.markdown('El centroide es el punto que ocupa la posici칩n media en un cluster, y nos brindan un valor promedio de las caracter칤sticas de un conjunto de elementos que pertenecen al mismo cl칰ster')
					st.dataframe(DatosTransacciones.groupby('clusterH').mean())

				infoCluster = st.checkbox('Ver interpretaci칩n de cada cl칰ster')
				if infoCluster:
					CentroidesH = DatosTransacciones.groupby('clusterH').mean()
					for i in range(totalCluster):
						st.subheader("Cl칰ster "+str(i))
						st.info('El cl칰ster n칰mero '+str(i)+ ' se conforma por un total de '+str(DatosTransacciones.groupby(['clusterH'])['clusterH'].count()[i])+' elementos con las siguientes caracter칤sticas en promedio:')
						st.table(CentroidesH.iloc[i])

						st.info('Con esta informaci칩n es posible que t칰 realices una interpretaci칩n m치s particular y especializada')

			algoKmeans = st.checkbox('Aplicar el algoritmo K-means')
			if algoKmeans:
				st.subheader('Aplicaci칩n del algoritmo K-means')
				st.markdown('Un algoritmo particional organiza los elementos dentro de k cl칰steres. El algoritmo K-means es uno de los algoritmos utilizados en la industria para crear k cl칰steres a partir de un conjunto de elementos, de modo que los miembros de un grupo sean similares.')

				st.subheader('Elbow Method. Definici칩n de k clusters para K-means')
				st.markdown('El m칠todo del codo es un m칠todo para decidir la cantidad de grupos que se pueden crear para la divisi칩n de los datos. En el m칠todo del codo se traza una curva en la que el punto de inflexi칩n se considera como un indicador del n칰mero adecuado de grupos. Con ayuda de este mecanismo se realiza la selecci칩n de los grupos que utiliza este programa')

				#Se utiliza random_state para inicializar el generador interno de n칰meros aleatorios

				SSE = []
				for i in range(2, 12):
				    km = KMeans(n_clusters=i, random_state=0)
				    km.fit(MEstandarizada)
				    SSE.append(km.inertia_)

				#Se grafica SSE en funci칩n de k
				plt.figure(figsize=(10, 7))
				plt.plot(range(2, 12), SSE, marker='o')
				plt.xlabel('Cantidad de clusters *k*')
				plt.ylabel('SSE')
				plt.title('Elbow Method')
				st.pyplot()

				st.warning('Con esta informaci칩n puedes elegir el n칰mero de cl칰steres en el lugar donde aprecies que existe un codo afilado en la gr치fica por el m칠todo del codo.')
				numClus=st.slider('Ingresa el n칰mero de cl칰steres que quieres generar', min_value=1, max_value=15, value=4, step=1)
				st.write('Cantidad de cl칰steres: '+str(numClus))

				st.error('En caso de que la gr치fica del m칠todo del codo no sea de muy clara, puedes pedir ayuda.')
				ayuda = st.checkbox('Ayuda para identificar el codo')
				

				if ayuda:
					kl = KneeLocator(range(2, 12), SSE, curve="convex", direction="decreasing")
					codo=kl.elbow
					st.success('La posici칩n donde se encuentra el codo es: '+str(codo)+'. Se recomienda emplear esa cantidad de cl칰steres')	
					plt.style.use('ggplot')
					kl.plot_knee()
					st.pyplot()



				aply = st.checkbox('Listo. He seleccionado el n칰mero de cl칰steres')
				if aply:

					MParticional = KMeans(n_clusters=numClus, random_state=0).fit(MEstandarizada)
					MParticional.predict(MEstandarizada)

					DatosTransacciones['clusterP']=MParticional.labels_
					st.dataframe(DatosTransacciones)
					st.subheader('La cantidad de elementos que tiene cada cl칰ster identificado')
					#Cantidad de elementos en los clusters
					st.dataframe(DatosTransacciones.groupby(['clusterP'])['clusterP'].count())
					verClusterP = st.checkbox('P. Ver elementos que pertenecen a cada cl칰ster')
					if verClusterP:
						i=0
						while i<numClus:
							st.info('Elementos del cl칰ster n칰mero '+str(i))
							st.dataframe(DatosTransacciones[DatosTransacciones.clusterP==i])
							i=i+1
					
					obtCentroides = st.checkbox('P. Obtener centroides')
					if obtCentroides:
						st.subheader('Obtenci칩n de los centroides')
						st.markdown('El centroide es el punto que ocupa la posici칩n media en un cluster, y nos brindan un valor promedio de las caracter칤sticas de un conjunto de elementos que pertenecen al mismo cl칰ster')
						st.dataframe(DatosTransacciones.groupby('clusterP').mean())

					infoClusterP = st.checkbox('P. Ver interpretaci칩n de cada cl칰ster')
					if infoClusterP:
						CentroidesP = DatosTransacciones.groupby('clusterP').mean()
						for i in range(numClus):
							st.subheader("Cl칰ster "+str(i))
							st.info('El cl칰ster n칰mero '+str(i)+ ' se conforma por un total de '+str(DatosTransacciones.groupby(['clusterP'])['clusterP'].count()[i])+' elementos con las siguientes caracter칤sticas en promedio:')
							st.table(CentroidesP.iloc[i])

						st.warning('Con esta informaci칩n es posible que t칰 realices una interpretaci칩n m치s particular y especializada')

					g3d = st.checkbox('Ver gr치fica de los elementos en los cl칰steres en 3D')
					if g3d:
						try:
							st.header("Gr치fica 3D de los cl칰steres generados: ")
							plt.rcParams['figure.figsize'] = (10, 7)
							plt.style.use('ggplot')

							if numClus == 3:
								colores=['red', 'blue', 'green']
							elif numClus == 4:
								colores=['red', 'blue', 'green', 'yellow']
							else:
								colores=['red', 'blue', 'green', 'yellow', 'pink']
		
							asignar=[]
							for row in MParticional.labels_:
								asignar.append(colores[row])

							fig = plt.figure()
							ax = Axes3D(fig)
							ax.scatter(MEstandarizada[:, 0], 
                                    MEstandarizada[:, 1], 
                                    MEstandarizada[:, 2], marker='o', c=asignar, s=60)
							ax.scatter(MParticional.cluster_centers_[:, 0], 
                                    MParticional.cluster_centers_[:, 1], 
                                    MParticional.cluster_centers_[:, 2], marker='o', c=colores, s=1000)
							st.pyplot()
						except:
							st.error("No fue posible obtener la gr치fica en 3D")
					








						










			

