import streamlit as st
import streamlit.components.v1 as components

#Valores por default
#Definiendo variables globales para las configuraciones avanzadas

#m칠tricas
lamb=1.5

#Clustering
totalClusterC=7

#ArbolesDeDecisi칩n y Clasificaci칩n Regresi칩n Log칤stica
tamPrueba=0.2
seed=0
maxProfundidad=8
minMuestraSplit=8
minMuestraLeaf=2

def start():
	st.title('Configuraciones Avanzadas')
	st.warning('**Nota**: Los algoritmos est치n configurado de forma gen칠rica para ofrecerte un resultado 칰til, pero si deseas cambiar la configuraci칩n predeterminada para los par치metros con que trabajan los algoritmos, en esta secci칩n podr치s hacerlo para algunos de ellos. **Esta opci칩n es recomendada 칰nicamente para usuarios expertos**, ya que puede influir en el funcionamiento y desempe침o del algoritmo, y si se realiza de forma incorrecta puede afectar a los resultados.')
	st.success('Puedes regresar a los valores por default con la opci칩n correspondiente a cada secci칩n cuando lo desees.')

	st.image("https://dinahosting.com/blog/cont/uploads/2019/01/Post-configurar-WordPress.jpg",width=1000)
	st.markdown('#### **En esta secci칩n puedes modificar algunos par치metros comunes de los siguientes m칩dulos**')
	st.markdown('游릮 **M칩dulo m칠tricas de distancia**')
	st.markdown('游릮 **M칩dulo de Clustering**')
	st.markdown('游릮 **M칩dulo de Clasificaci칩n por Regresi칩n Log칤stica**')
	st.markdown('游릮 **M칩dulo de 츼rboles de decisi칩n**')

	#Metricas
	MD = st.checkbox('Modificar par치metros para el M칩dulo m칠tricas de distancia')
	if MD:
		st.subheader('游늻 Distancia Minkowski')
		st.markdown('En esta secci칩n puedes moficar el valor de lambda para la distancia Minkowski')
		st.markdown('**Descripci칩n**: La distancia Minkowski es una distancia entre dos puntos en un espacio n-dimensional. Es una m칠trica de distancia generalizada: Euclidiana, Manhattan y Chebyshev. ')
		st.markdown('Esta m칠trica permite calcular la distancia de tres formas diferentes, en funci칩n del valor de **lambda**, que define el orden para las 3 diferentes m칠tricas que conocemos. Los valores se definen de la siguiente forma')
		st.markdown('游릮 **풭=1. Distancia Manhattan**')
		st.markdown('游릮 **풭=2. Distancia Euclidiana**')
		st.markdown('游릮 **풭=3. Distancia de Chebyshev**')
		st.warning('Actualmente se suelen emplear valores intermedios, como **풭=1.5** que proporciona un equilibrio entre las medidas')
		st.markdown('**Selecciona el valor de 풭 que deseas:**')
		lamb=st.slider('Lambda 풭:', min_value=1.0, max_value=3.0, value=1.5, step=0.5)
		st.write('**풭: **'+str(lamb))

		resMD = st.checkbox('MD. Volver al valor por default')
		if resMD:
			lamb=1.5


	#Clustering
	MC = st.checkbox('Modificar par치metros para el M칩dulo de Clustering')
	if MC:
		st.subheader('M칩dulo de Clustering')
		st.markdown('Para trabajar con ese algoritmo se debe definir un n칰mero de cl칰steres')
		st.warning('Actualmente se emplea un valor por defecto de '+str(7)+' cl칰steres')
		totalClusterC=st.slider('J. Ingresa el n칰mero de cl칰steres que quieres generar', min_value=1, max_value=15, value=7, step=1)
		st.write('J. Cantidad de cl칰steres: '+str(totalClusterC))

		resMC = st.checkbox('MC. Volver al valor por default')
		if resMC:
			totalClusterC=7

	#Clasificaci칩n Regresi칩n Log칤stica
	RL = st.checkbox('Modificar par치metros para el M칩dulo de Clasificaci칩n por Regresi칩n Log칤stica')
	if RL:
		st.subheader('M칩dulo de Clasificaci칩n por Regresi칩n Log칤stica')
		st.markdown('Para trabajar con ese algoritmo se debe definir las caracter칤sticas de la estructura jer치rquica a generar, puedes seleccionar entre el tama침o de prueba para la divisi칩n de los datos, la semilla para la generaci칩n de los n칰meros random, la muestra m칤nima de divisi칩n y la muestra m칤nima de los nodos hoja')
		st.markdown('游릮 **Profundidad m치xima.** Indica la m치xima profundidad a la cual puede llegar el 치rbol. Esto ayuda a combatir el overfitting, pero tambi칠n puede provocar underfitting.')
		st.markdown('游릮 **Cantidad m칤nima de datos por hoja.** Indica la cantidad m칤nima de datos que debe tener un nodo hoja.')
		st.markdown('游릮 **Cantidad m칤nima de divisi칩n.** Indica la cantidad m칤nima de datos para que un nodo de decisi칩n se pueda dividir. Si la cantidad no es suficiente este nodo se convierte en un nodo hoja.')

		tamPruebaIn=st.slider('Ingresa el porcentaje del tama침o del conjunto de prueba', min_value=0, max_value=100, value=20, step=2)
		st.write('Porcentaje: '+str(tamPruebaIn)+'%')
		tamPrueba=tamPruebaIn/100

		seed=number = st.number_input('Inserta la semilla deseada')

		maxProfundidad = st.slider('Ingresa la profundidad m치xima deseada', min_value=0, max_value=30, value=8, step=1)
		st.write('Profundidad m치xima: '+str(maxProfundidad))

		minMuestraLeaf = st.slider('Ingresa la cantidad m칤nima de datos por hoja', min_value=0, max_value=30, value=2, step=1)
		st.write('Cantidad m칤nima de datos por hoja: '+str(minMuestraLeaf))

		minMuestraSplit = st.slider('Ingresa la cantidad m칤nima de divisi칩n', min_value=0, max_value=30, value=2, step=1)
		st.write('Cantidad m칤nima de divisi칩n: '+str(minMuestraSplit))

		resRL = st.checkbox('RL. Volver al valor por default')
		if resRL:
			tamPrueba=0.2
			seed=0
			maxProfundidad=8
			minMuestraSplit=8
			minMuestraLeaf=2

	#츼rboles de Decisi칩n
	AA = st.checkbox('Modificar par치metros para el M칩dulo de 츼rboles de Decisi칩n')
	if AA:
		st.subheader('M칩dulo de 츼rboles de Decisi칩n')
		st.markdown('Para trabajar con ese algoritmo se debe definir las caracter칤sticas del 치rbol a generar, puedes seleccionar entre el tama침o de prueba para la divisi칩n de los datos, la semilla para la generaci칩n de los n칰meros random, la muestra m칤nima de divisi칩n y la muestra m칤nima de los nodos hoja')
		st.markdown('游릮 **Profundidad m치xima.** Indica la m치xima profundidad a la cual puede llegar el 치rbol. Esto ayuda a combatir el overfitting, pero tambi칠n puede provocar underfitting.')
		st.markdown('游릮 **Cantidad m칤nima de datos por hoja.** Indica la cantidad m칤nima de datos que debe tener un nodo hoja.')
		st.markdown('游릮 **Cantidad m칤nima de divisi칩n.** Indica la cantidad m칤nima de datos para que un nodo de decisi칩n se pueda dividir. Si la cantidad no es suficiente este nodo se convierte en un nodo hoja.')

		tamPruebaIn=st.slider('AA. Ingresa el porcentaje del tama침o del conjunto de prueba', min_value=0, max_value=100, value=20, step=2)
		st.write('Porcentaje: '+str(tamPruebaIn)+'%')
		tamPrueba=tamPruebaIn/100

		seed=number = st.number_input('AA. Inserta la semilla deseada')

		maxProfundidad = st.slider('AA. Ingresa la profundidad m치xima deseada', min_value=0, max_value=30, value=8, step=1)
		st.write('Profundidad m치xima: '+str(maxProfundidad))

		minMuestraLeaf = st.slider('AA. Ingresa la cantidad m칤nima de datos por hoja', min_value=0, max_value=30, value=2, step=1)
		st.write('Cantidad m칤nima de datos por hoja: '+str(minMuestraLeaf))

		minMuestraSplit = st.slider('AA. Ingresa la cantidad m칤nima de divisi칩n', min_value=0, max_value=30, value=2, step=1)
		st.write('Cantidad m칤nima de divisi칩n: '+str(minMuestraSplit))

		resAA = st.checkbox('AA. Volver al valor por default')
		if resAA:
			tamPrueba=0.2
			seed=0
			maxProfundidad=8
			minMuestraSplit=8
			minMuestraLeaf=2





	
	

